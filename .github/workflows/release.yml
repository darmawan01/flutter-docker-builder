name: Release

on:
  push:
    tags: [ 'v*' ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: darmawanz01/flutter-docker-builder

jobs:
  build-alpine:
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ env.IMAGE_NAME }}-alpine
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Alpine image
      run: |
        echo "Building Alpine-based Flutter Docker image..."
        ./build.sh build-image -b alpine
        
        # Verify the image was built successfully
        docker images | grep flutter-docker-builder || (echo "❌ Alpine image build failed" && exit 1)
        echo "✅ Alpine image built successfully"

  build-ubuntu:
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ env.IMAGE_NAME }}-ubuntu
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Ubuntu image
      run: |
        echo "Building Ubuntu-based Flutter Docker image..."
        ./build.sh build-image -b ubuntu
        
        # Verify the image was built successfully
        docker images | grep flutter-docker-builder || (echo "❌ Ubuntu image build failed" && exit 1)
        echo "✅ Ubuntu image built successfully"

  push-and-test:
    runs-on: ubuntu-latest
    needs: [build-alpine, build-ubuntu]
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate tags
      id: tags
      run: |
        # Generate safe tags for release
        VERSION=${GITHUB_REF#refs/tags/}
        echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Push Alpine image
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Pushing Alpine image with tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-alpine, ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine"
        
        # Tag and push Alpine image
        docker tag flutter-docker-builder:alpine ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-alpine
        docker tag flutter-docker-builder:alpine ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-alpine
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine

    - name: Push Ubuntu image
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Pushing Ubuntu image with tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}, ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        # Tag and push Ubuntu image
        docker tag flutter-docker-builder:ubuntu ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}
        docker tag flutter-docker-builder:ubuntu ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Test APK Build with Ubuntu Image
      run: |
        echo "Testing APK build with Ubuntu image using test_app..."
        mkdir -p test_output
        
        # Build APK using Ubuntu image and test_app
        ./build.sh build-apk -b ubuntu -p ./test_app -o ./test_output
        
        # Verify APK was created
        if [ -f "test_output/apk/debug/app-debug.apk" ]; then
          echo "✅ APK build test successful with Ubuntu image"
          ls -la test_output/apk/debug/
        else
          echo "❌ APK build test failed with Ubuntu image"
          exit 1
        fi

    - name: Test APK Build with Alpine Image
      run: |
        echo "Testing APK build with Alpine image using test_app..."
        mkdir -p test_output_alpine
        
        # Build APK using Alpine image and test_app
        ./build.sh build-apk -b alpine -p ./test_app -o ./test_output_alpine
        
        # Verify APK was created
        if [ -f "test_output_alpine/apk/debug/app-debug.apk" ]; then
          echo "✅ APK build test successful with Alpine image"
          ls -la test_output_alpine/apk/debug/
        else
          echo "❌ APK build test failed with Alpine image"
          exit 1
        fi

    - name: Upload Test APKs as Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-apks
        path: |
          test_output/apk/debug/*.apk
          test_output_alpine/apk/debug/*.apk
        retention-days: 30

    - name: Generate release notes
      id: release_notes
      uses: actions/github-script@v7
      with:
        script: |
          const { data: commits } = await github.rest.repos.compareCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            base: 'main',
            head: context.sha
          });
          
          const changes = commits.commits.map(commit => 
            `- ${commit.commit.message.split('\n')[0]}`
          ).join('\n');
          
          return changes;

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## 🚀 Flutter Docker Builder ${{ github.ref_name }}
          
          ### What's Changed
          ${{ steps.release_notes.outputs.result }}
          
          ### Docker Images
          
          **Ubuntu-based image (recommended):**
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```
          
          **Alpine-based image (lightweight):**
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.version }}-alpine
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine
          ```
          
          ### Usage
          
          **Ubuntu image:**
          ```bash
          docker run --rm \
            -v "$PROJECT_DIR:/app" \
            -v "$OUTPUT_DIR:/output" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.version }}
          ```
          
          **Alpine image:**
          ```bash
          docker run --rm \
            -v "$PROJECT_DIR:/app" \
            -v "$OUTPUT_DIR:/output" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.version }}-alpine
          ```
          
          ### Build Arguments
          - Flutter Version: ${{ vars.FLUTTER_VERSION || '3.32.4' }}
          - Android API Level: ${{ vars.ANDROID_API_LEVEL || '35' }}
          - Java Version: ${{ vars.JAVA_VERSION || '17' }}
          - NDK Version: ${{ vars.NDK_VERSION || '27.0.12077973' }}
          
          ### Test Results
          ✅ Both Ubuntu and Alpine images successfully built APKs from test_app
          📦 Test APKs are available as GitHub artifacts
        draft: false
        prerelease: false 